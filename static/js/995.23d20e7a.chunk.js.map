{"version":3,"file":"static/js/995.23d20e7a.chunk.js","mappings":"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","sources":["components/CalendarTools/CalendarTools.styled.jsx","components/CalendarTools/PeriodPaginator/PeriodPaginator.styled.jsx","components/CalendarTools/PeriodPaginator/PeriodPaginator.jsx","components/CalendarTools/PeriodTypeSelect/PeriodTypeSelect.styled.jsx","components/CalendarTools/PeriodTypeSelect/PeriodTypeSelect.jsx","components/CalendarTools/CalendarTools.jsx","components/CalendarTable/CalendarTable.styled.jsx","components/CalendarTable/CalendarTable.jsx","components/MonthCalendarHead/MonthCalendarHead.styled.jsx","components/MonthCalendarHead/MonthCalendarHead.jsx","components/ChoosedMonth/ChoosedMonth.jsx","pages/CalendarPage/CalendarPage.jsx"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const ToolsWrapper = styled.div`\n@media(min-width: 768px) {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n  };`\n\nexport const CurrentWrapper = styled.div`\ndisplay: flex;\njustify-content: space-between;\nmargin-bottom: 18px;`;\n\nexport const ChooseWrapper = styled.div`\nmargin-bottom: 24px;\ndisplay: flex`;\n\nexport const CurrentMonth = styled.span`\ndisplay: flex;\nflex-direction: row;\njustify-content: center;\nalign-items: center;\npadding: 6px 12px;\nbackground: #3E85F3;\nborder-radius: 8px;\ncolor: #fff;\nfont-family: 'Inter';\nfont-style: normal;\nfont-weight: 700;\nfont-size: 14px;\nline-height: 1.29;\ntext-align: center;\ntext-transform: uppercase;\n\n@media(min-width: 768px) {\n    padding: 8px 12px;\n    font-size: 16px;\n    line-height: 1.12;\n    margin-right: 8px;\n  };\n\n`;\n\n","import styled from \"styled-components\";\nimport { BiChevronRight, BiChevronLeft } from \"react-icons/bi\";\n\nexport const BiChevronLeftStyled = styled(BiChevronLeft)`\nheight: 30px;\nwidth: 36px;\n\n:hover{\n  fill: #3E85F3;\n};`;\n\nexport const BiChevronRightStyled = styled(BiChevronRight)`\nheight: 30px;\nwidth: 36px;\n\n:hover{\n  fill: #3E85F3;\n};`;\n\nexport const CurrentDate = styled.span`\ndisplay: flex;\nflex-direction: row;\njustify-content: center;\nalign-items: center;\npadding: 6px 12px;\nbackground: #3E85F3;\nborder-radius: 8px;\ncolor: #fff;\nfont-family: 'Inter';\nfont-style: normal;\nfont-weight: 700;\nfont-size: 14px;\nline-height: 1.29;\ntext-align: center;\ntext-transform: uppercase;\n\n@media(min-width: 768px) {\n    padding: 8px 12px;\n    font-size: 16px;\n    line-height: 1.12;\n    margin-right: 8px;\n  };\n\n`;\n\nexport const CurrentWrapper = styled.div`\ndisplay: flex;\njustify-content: space-between;\nmargin-bottom: 18px;`;\n\nexport const ButtonPeriodPaginator = styled.button`\nwidth: 36px;\nheight: 30px;\nbox-sizing: border-box;\nfont-size: 24px;\nfill: red;\ndisplay: flex;\nflex-direction: row;\njustify-content: center;\nalign-items: center;\npadding: 8px 12px;\n\nbackground: #FFFFFF;\nborder: 1px solid rgba(220, 227, 229, 0.5);\nborder-radius: 8px;`;\n\nexport const ConteinerForButtons = styled.div`\ndisplay: flex;`","import { format } from \"date-fns\";\nimport { CurrentDate, CurrentWrapper, BiChevronLeftStyled, BiChevronRightStyled, ButtonPeriodPaginator, ConteinerForButtons } from \"./PeriodPaginator.styled\";\nimport { useDispatch } from \"react-redux\";\nimport { useEffect } from \"react\";\nimport { fetchTasksAll } from \"redux/tasks/operations\";\n\nexport const PeriodPaginator = ({isChoosedMonth, changeAskDay, calendar, askDay}) => {\n    const date = isChoosedMonth ? format(askDay, 'MMMM yyyy') : format(askDay, 'dd MMMM yyyy');\n    console.log(date)\n    \n    const newFormat = new Date(date);\n    console.log(newFormat, 'newFormat')\nconst isoString = newFormat.toISOString().substr(0, 7);\nconsole.log(isoString, 'isoString')\n\n  \n  \n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(fetchTasksAll(isoString));\n  }, [dispatch, isoString]);\n  \n    return (\n        <CurrentWrapper>\n            <CurrentDate>{date}</CurrentDate>\n            <ConteinerForButtons>\n                <ButtonPeriodPaginator onClick={() => changeAskDay(-1)}><BiChevronLeftStyled/></ButtonPeriodPaginator>\n                <ButtonPeriodPaginator onClick={() => changeAskDay(1)}><BiChevronRightStyled/></ButtonPeriodPaginator>\n            </ConteinerForButtons>\n        </CurrentWrapper>\n    )\n};","import { NavLink } from 'react-router-dom';\nimport styled from 'styled-components';\n\nexport const ChooseWrapper = styled.div`\n  margin-bottom: 24px;\n  display: flex;\n`;\n\nexport const ActivePeriod = styled(NavLink)`\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n  padding: 8px 16px;\n  gap: 149px;\n  width: 76px;\n  height: 34px;\n  background: #cae8ff;\n  border-right: 1px solid rgba(62, 133, 243, 0.2);\n  border-radius: 8px 0px 0px 8px;\n  font-family: 'Inter';\n  font-style: normal;\n  font-weight: 500;\n  font-size: 14px;\n  line-height: 1.29;\n  text-align: center;\n  color: #3e85f3;\n  border: none;\n`;\n\nexport const NotActivePeriod = styled(NavLink)`\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n  padding: 8px 25px;\n  gap: 149px;\n  width: 76px;\n  height: 34px;\n  background: #e3f3ff;\n  border-radius: 0px 8px 8px 0px;\n  font-family: 'Inter';\n  font-style: normal;\n  font-weight: 500;\n  font-size: 14px;\n  line-height: 1.29;\n  text-align: center;\n  color: #3e85f3;\n  border: none;\n`;\n","import {\n  ActivePeriod,\n  ChooseWrapper,\n  NotActivePeriod,\n} from './PeriodTypeSelect.styled';\n\nexport const PeriodTypeSelect = ({ toogleChooseMonth }) => {\n  return (\n    <ChooseWrapper>\n      <ActivePeriod onClick={toogleChooseMonth} to=\"/calendar/month\">\n        Month\n      </ActivePeriod>\n      <NotActivePeriod onClick={toogleChooseMonth} to=\"/calendar/day\">\n        Day\n      </NotActivePeriod>\n    </ChooseWrapper>\n  );\n};\n","import { ToolsWrapper } from \"./CalendarTools.styled\"\nimport { PeriodPaginator } from \"./PeriodPaginator/PeriodPaginator\"\nimport { PeriodTypeSelect } from \"./PeriodTypeSelect/PeriodTypeSelect\"\n\nexport const CalendarTools = ({isChoosedMonth, changeAskDay, askDay, calendar, toogleChooseMonth}) => {\n    return (\n        <ToolsWrapper>\n        <PeriodPaginator isChoosedMonth={isChoosedMonth} askDay={askDay} changeAskDay={changeAskDay} calendar={calendar}/>\n        <PeriodTypeSelect toogleChooseMonth={toogleChooseMonth}/>\n        </ToolsWrapper>\n    )\n}","import { NavLink } from \"react-router-dom\";\nimport styled from \"styled-components\";\n\nexport const GridWrapper = styled.div`\ndisplay: grid;\ngrid-template-columns: repeat(7, 1fr);\nborder-radius: 8px;`;\n\nexport const CellWrapper = styled(NavLink)`\nmin-width: 48px;\nmin-height: 68px;\nbackground: #FFFFFF;\nborder: 1px solid rgba(220, 227, 229, 0.5);\nfont-family: 'Inter';\nfont-style: normal;\nfont-weight: 700;\nfont-size: 12px;\nline-height: 1.17;\ncolor: ${props => props.iscurrentmonth === 'true' ? '#343434' : '#fff'};\n\n@media(min-width: 768px) {\n    min-width: 100px;\n    height: 104px;\n    font-family: 'Inter';\n    font-size: 16px;\n    line-height: 1.12;\n  };\n\n  @media(min-width: 1280px) {\n    min-width: 155px;\n    height: 125px;\n    font-family: 'Inter';\n  }\n`;\n\nexport const RowInCell = styled.div`\ndisplay: flex;\njustify-content: ${props => props.justifyContent ? props.justifyContent : 'flex-start'}`;\n\nexport const DayWrapper = styled.div`\npadding: 10px 12px;\n\n@media(min-width: 768px) {\n    padding: 18px 22px;\n  }`;\n\nexport const CurrentDay = styled.div`\nbackground: #3E85F3;\ncolor: #fff;\npadding: 4px 6px;\nborder-radius: 6px;\ndisplay: flex;\nalign-items: center;\njustify-content: center;\nmargin: -4px -6px;\n\n@media(min-width: 768px) {\n    padding: 4px 8px;\n    margin: -4px -8px;\n    border-radius: 8px;\n  }`;\n\nexport const ShowDayWrapper = styled.div`\ndisplay: flex;\njustify-content: flex-end;`;\n\n","import { format, isToday, getUnixTime, isSameMonth, startOfDay, endOfDay } from \"date-fns\";\nimport { CellWrapper, DayWrapper, GridWrapper, RowInCell, CurrentDay, ShowDayWrapper } from \"./CalendarTable.styled\";\n// import { useSelector } from \"react-redux\";\n// import { selectIsitems } from \"redux/tasks/selectors\";\n\nconst tasks = [{\n    name: 'Task-1',\n    date: '2023-05-01T21:00:00.000+00:00',\n    startTime: '10:30',\n    endTime: '15:00',\n    priority: 'medium',\n    category: 'toDo',\n}, {\n    name: 'Task-2',\n    date: '2023-04-28T00:00:00.000+00:00',\n    startTime: '10:30',\n    endTime: '15:00',\n    priority: 'medium',\n    category: 'toDo',\n}, {\n    name: 'Task-3',\n    date: '2023-04-30T21:00:00.000+00:00',\n    startTime: '10:30',\n    endTime: '15:00',\n    priority: 'medium',\n    category: 'toDo',\n}];\n\nexport const CalendarTable = ({calendar, askDay}) => {\n\n    const isCurrentMonth = (day) => isSameMonth(askDay, day);\nconsole.log(isCurrentMonth, 'isCurrentMonth');\n    let filteredTasks = [];\n\n    const getDayTasks = (day) => {\n        filteredTasks = tasks?.filter(\n            task => task.date >= startOfDay(day) && task.date <= endOfDay(day)\n        );\n    };\n\n    return (\n        <GridWrapper>{\n            calendar.map((dayItem) => (\n            <CellWrapper \n            to={'colendar/month/:'}\n            key={getUnixTime(dayItem)}\n            iscurrentmonth={isCurrentMonth(dayItem).toString()}\n            >\n                <RowInCell justifyContent={'flex-end'}>\n                    <ShowDayWrapper>\n                        <DayWrapper>\n                        {\n                            isToday(dayItem) ? (\n                                <CurrentDay>{format(dayItem, 'd')}</CurrentDay>\n                            ) : (\n                                format(dayItem, 'd') \n                            )\n                        }\n                        </DayWrapper>\n                    </ShowDayWrapper>\n                    <div>\n                        {getDayTasks(dayItem)}\n                        {filteredTasks.map(task => (\n                            <div>{task.name}</div>\n                        ))}\n                    </div>\n                </RowInCell>\n            </CellWrapper>))}\n        </GridWrapper>\n    )\n} ","import styled from \"styled-components\";\n\nexport const GridWrapper = styled.ul`\ndisplay: grid;\ngrid-template-columns: repeat(7, 1fr);\nborder-radius: 8px;\nborder: 1px solid rgba(220, 227, 229, 0.5);\npadding-left: 0;\nmargin-bottom: 14px;`;\n\nexport const CellWrapper = styled.li`\nmin-width: 48px;\nheight: 50px;\nbackground: #FFFFFF;\nfont-family: 'Inter';\nfont-style: normal;\nfont-weight: 600;\nfont-size: 16px;\nline-height: 1.12;\ntext-align: center;\ntext-transform: uppercase;\ncolor: ${props => props.weekend ? '#3E85F3' : '#616161'};\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n`;","import { CellWrapper, GridWrapper} from \"./MonthCalendarHead.styled\";\n\nexport const MonthCalendarHead = () => {\n    return (    \n        <GridWrapper>\n            <CellWrapper>M</CellWrapper>\n            <CellWrapper>T</CellWrapper>\n            <CellWrapper>W</CellWrapper>\n            <CellWrapper>T</CellWrapper>\n            <CellWrapper>F</CellWrapper>\n            <CellWrapper weekend={true}>S</CellWrapper>\n            <CellWrapper weekend={true}>S</CellWrapper>\n        </GridWrapper>      \n    )\n}","import { CalendarTable } from \"../CalendarTable/CalendarTable\"\nimport { MonthCalendarHead } from \"../MonthCalendarHead/MonthCalendarHead\"\n\nexport const ChoosedMonth = ({calendar, askDay}) => {\n    return (\n        <>\n        <MonthCalendarHead/>\n        <CalendarTable calendar={calendar} askDay={askDay}/>\n        </>\n    )\n}","\nimport { endOfMonth, endOfWeek, startOfMonth, startOfToday, isSameDay, addDays, addMonths } from 'date-fns';\nimport { startOfWeek } from 'date-fns';\nimport { CalendarTools } from '../../components/CalendarTools/CalendarTools';\nimport { useState } from 'react';\nimport { ChoosedMonth } from '../../components/ChoosedMonth/ChoosedMonth';\nimport { ChoosedDay } from '../../components/ChoosedDay/ChoosedDay';\n// import { useDispatch, useSelector } from 'react-redux';\n// import { selectIsitems } from 'redux/tasks/selectors';\n// import { fetchTasksAll } from 'redux/tasks/operations';\n\nexport default function CalendarPage () {\n  const [askDay, setAskDay] = useState(startOfToday());\n  const [isChoosedMonth, setIsChoosedMonth] = useState(true);\n\n  const startMonth = startOfMonth(askDay);\n  const startDay = startOfWeek(startMonth, { weekStartsOn: 1 });\n  const endMonth = endOfMonth(askDay);\n  const endDay = endOfWeek(endMonth, { weekStartsOn: 1 })\n  const firstDayOfNextMonth = addDays(endDay, 1);\n  const firstDayOFWeek = startOfWeek(askDay, {weekStartsOn: 1});\n  const lastDayOfWeek = endOfWeek(askDay, {weekStartsOn: 1});\n  const startNextWeek = addDays(lastDayOfWeek, 1);\n  \n  // const items = useSelector(selectIsitems);\n  // const dispatch = useDispatch();\n  // useEffect(() => {\n  //   dispatch(fetchTasksAll());\n  // }, [dispatch]);\n  // console.log(items);\n\n  let calendar = [];\n  let weekCalendar = [];\n  let day = startDay;\n  let weekDay = firstDayOFWeek;\n  while (!isSameDay(day, firstDayOfNextMonth)) {\n  calendar.push(day);\n  day = addDays(day, 1);\n  };\n\n  while (!isSameDay(weekDay, startNextWeek)){\n    weekCalendar.push(weekDay);\n    weekDay = addDays(weekDay, 1);\n  }\n\n  const changeAskDay = (value) => {\n    if(!isChoosedMonth) {weekCalendar = [];\n      return setAskDay(addDays(askDay, value));}\n    \n  \n  if (isChoosedMonth) {\n    return setAskDay(addMonths(askDay, value));\n  } } \n\n\n  const toogleChooseMonth = () => {\n    setIsChoosedMonth(prev => !prev);\n  };\n\n\n  return (\n\n     <>\n     <CalendarTools calendar={calendar} changeAskDay={changeAskDay} isChoosedMonth={isChoosedMonth} askDay={askDay} toogleChooseMonth={toogleChooseMonth}/>\n     {isChoosedMonth ? <ChoosedMonth calendar={calendar} askDay={askDay}/> : <ChoosedDay weekCalendar={weekCalendar}/>}\n     </> \n\n  );\n};\n\n\n"],"names":["ToolsWrapper","styled","BiChevronLeftStyled","BiChevronLeft","BiChevronRightStyled","BiChevronRight","CurrentDate","CurrentWrapper","ButtonPeriodPaginator","ConteinerForButtons","PeriodPaginator","isChoosedMonth","changeAskDay","askDay","calendar","date","format","console","log","newFormat","Date","isoString","toISOString","substr","dispatch","useDispatch","useEffect","fetchTasksAll","onClick","ChooseWrapper","ActivePeriod","NavLink","NotActivePeriod","PeriodTypeSelect","toogleChooseMonth","to","CalendarTools","GridWrapper","CellWrapper","props","iscurrentmonth","RowInCell","justifyContent","DayWrapper","CurrentDay","ShowDayWrapper","tasks","name","startTime","endTime","priority","category","CalendarTable","isCurrentMonth","day","isSameMonth","filteredTasks","map","dayItem","toString","isToday","filter","task","startOfDay","endOfDay","getUnixTime","weekend","MonthCalendarHead","ChoosedMonth","CalendarPage","useState","startOfToday","setAskDay","setIsChoosedMonth","startMonth","startOfMonth","startDay","startOfWeek","weekStartsOn","endMonth","endOfMonth","endDay","endOfWeek","firstDayOfNextMonth","addDays","firstDayOFWeek","lastDayOfWeek","startNextWeek","weekCalendar","weekDay","isSameDay","push","value","addMonths","prev","ChoosedDay"],"sourceRoot":""}